Script <- "~/Documents/Research/1.projects/Eawag/Projects/12.RivNet/rivnet/Scripts/" #Working directory for scripts
Dat <- "~/Documents/Research/1.projects/Eawag/Projects/12.RivNet/rivnet/Data/" #Working directory for data
fig.p = "~/Documents/Research/1.projects/Eawag/Projects/12.RivNet/3.Results/" #working directory for figures
LOC <- read.csv(paste0(Dat,"EPT_IBCH_Localities_EZGNR.csv"), header=T, sep=",", dec=".", stringsAsFactor=F)
LOC$locality <- as.integer(gsub(',', '', LOC$locality)) #sampling location for BDM sampling
LOC$EZGNR <- as.integer(gsub(',', '', LOC$EZGNR)) #subcatchment names in the RHINE network that were also sampled by BDM
AB <- read.table(paste0(Dat,"EPT_IBCH_Data20150826.txt"), header=T) #Abundance data per species per sampling
IBCH_SP <- read.table(paste0(Dat,"IBCH_SPECIES_20170515.txt"), header=T) #IBCH species functional groups
ENV <- read.table(paste0(Dat,"BDM_Data_For_Ryo_20160115.txt"), header=T) #ENV data per locality
match4 = match(LOC$locality,AB$locality,0)
min(match4)
loc.missing = LOC$locality[which(match4==0)] #identify which localities are missing in AB
loc.missing
LOC = LOC[-which(LOC$locality %in% loc.missing),] #remove them from LOC dataset
AB = AB[which(AB$IBCH_EPT=="IBCH"),]
LOC = LOC[which(LOC$locality %in% AB$locality),]
ENV = ENV[which(ENV$locality %in% AB$locality),]
length(unique(LOC$locality));length(unique(ENV$locality));length(unique(AB$locality))
many.NA = c("embankment_modifications","cascades","cascade_height","Q_amean_m3.s","Qvar_amean_m3.s","Q_amax_m3.s")
ENV = ENV[,-which(colnames(ENV) %in% many.NA)]
many.0 = c("stormsewage_m3.a","wastewater_m3.a","hydropower_count","canal_percentage","disposalsite_190207_percentage",
"disposalsite_2004_percentage","floodplainwetland_percentage","dam_count")
ENV = ENV[,-which(colnames(ENV) %in% many.0)]
ENV = na.omit(ENV) #that leaves 296 sites
LOC = LOC[which(LOC$locality %in% ENV$locality),]
AB = AB[which(AB$locality %in% ENV$locality),]
#verify that all datasets have the same numbers of locations
length(unique(LOC$locality));length(unique(ENV$locality));length(unique(AB$locality))
load(paste0(Dat,"RHINE.rda")) #Loads the igraph object called SUBGRAPH2
for (i in 1:length(V(SUBGRAPH2)$name)){
x = match(V(SUBGRAPH2)$name[i],LOC$EZGNR,0) #provide the row in LOC that corresponds (same as x <- which(V(SUBGRAPH2)$name[i]==LOC$EZGNR)), but with match() one can decide of a specific value when no match is found between SUBGRAPH$name and LOC$EZGNR, which is necessary for the following if()
if(x != 0)
V(SUBGRAPH2)$name[i] <- LOC$locality[x]
}
library)(igraph2)
library(igraph2)
library(igraph)
for (i in 1:length(V(SUBGRAPH2)$name)){
x = match(V(SUBGRAPH2)$name[i],LOC$EZGNR,0) #provide the row in LOC that corresponds (same as x <- which(V(SUBGRAPH2)$name[i]==LOC$EZGNR)), but with match() one can decide of a specific value when no match is found between SUBGRAPH$name and LOC$EZGNR, which is necessary for the following if()
if(x != 0)
V(SUBGRAPH2)$name[i] <- LOC$locality[x]
}
length(unique(sub <- which(V(SUBGRAPH2)$name %in% LOC$locality)))
loc.rhine = V(SUBGRAPH2)$name[sub] #Extract the names and order of the localities
loc.rhine = loc.rhine[order(loc.rhine)]
BETW <- betweenness(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine],directed=T,nobigint=T,normalized=T)
DEG  <- degree(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine],mode="in") #number of adjacent edges to a vertex
CENT  <- closeness(SUBGRAPH2, vids=V(SUBGRAPH2)[loc.rhine],mode="out",normalized=F) #how many steps is required to access every other vertex from a given vertex
net.dist = distances(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine], to=V(SUBGRAPH2)[loc.rhine])
hist(CENT)
net.met = cbind(BETW,DEG,CENT)
rm(BETW);rm(DEG);rm(CENT)
ENV = ENV[which(ENV$locality %in% loc.rhine),] #Select only site from the RHIN
ENV$drainage #only RHEIN remains
length(unique(ENV$locality)) #should be 208
ENV$distance_to_outlet[ENV$locality==650243] #value of dist.to.outlet for locality 521174 before re-ordering
ENV = ENV[match(loc.rhine,ENV$locality),] #re-order to match with locality order of network metrics
ENV$distance_to_outlet[ENV$locality==650243] #should be same value if re-ordering worked properly
ENV= droplevels(ENV)
LOC = LOC[which(LOC$locality %in% loc.rhine),]
LOC = LOC[match(loc.rhine,LOC$locality),]
head(colnames(net.dist)) #order in which the network metrics are
head(ENV$locality) #order in which ENV data is
head(LOC$locality)
detach("package:igraph", unload=TRUE)
rivnet = as.data.frame(cbind(LOC$xkoord,LOC$ykoord,ENV,net.met))
row.names(rivnet) = 1:208
rm(net.met)
colnames(rivnet)[1:2] = c("x","y")
rivnet$x = as.integer(gsub(",","",rivnet$x))
rivnet$y = as.integer(gsub(",","",rivnet$y))
length(unique(rivnet$locality)) #should be 208
AB = AB[which(AB$locality %in% loc.rhine),] #select only sites from the RHEIN
length(unique(AB$locality)) #should be 208
AB$drainage #only RHEIN remains
AB = droplevels(AB) #drop unused level
AB$grazer_scraper = 0
AB$miner = 0
AB$xylophagous = 0
AB$shredder = 0
AB$gatherer_collector = 0
AB$active_filter_feeder = 0
AB$passive_filter_feeder = 0
AB$predator = 0
AB$parasite = 0
AB$other = 0
for(i in 1:nrow(AB)){
if(AB$IBCH_EPT[i] == "IBCH")  AB[i,14:23] = IBCH_SP[which(IBCH_SP$family %in% AB$family[i]),6:15]
}
head(AB)
head(IBCH_SP)
summary(rowSums(AB[which(AB$IBCH_EPT=="IBCH"),14:23])) # not good
miss.fam = unique(AB$family[which(rowSums(AB[,14:23])==0)])
miss.fam
#1 family for which we could not informaiton and experts did not know
AB = AB[-which(AB$family %in% miss.fam),] #Remove them for now
summary(rowSums(AB[which(AB$IBCH_EPT=="IBCH"),14:23])) # good!
AB$family[which(AB$IBCH_EPT=="IBCH")]
AB[which(AB$family=="Empididae")[1],14:23]
IBCH_SP[which(IBCH_SP$family=="Empididae"),6:15]
i=1
j=14
AB[i,j]
AB[i,j]==5
length(which(AB[i,14:23]==5))==2)
length(which(AB[i,14:23]==5))==2
length(which(AB[i,14:23]==5))
AB[i,j]==max(AB[i,14:23])
length(which(AB[i,14:23]==5))!=2
which(AB[i,14:23]==AB[i,j])
AB[i,14:23]
AB[i,j]
AB[i,14:23]==AB[i,j]
length(which(AB[i,14:23]==AB[i,j]))!=2)
length(which(AB[i,14:23]==AB[i,j]))!=2
AB[i,14:23]==AB[i,j])
AB[i,14:23]==AB[i,j]
AB.fun = AB
AB.fun[,14:23] = AB.fun[,14:23]/10
for(i in 1:nrow(AB.fun)){
for(j in 14:23) {
if(AB[i,j]==5 & length(which(AB[i,14:23]==5))==2) { AB.fun[i,j] = AB.fun$nr_ind[i]*AB.fun[i,j] #if two 5 then abundance will be divived in both functional groups
} else if(AB[i,j]==max(AB[i,14:23]) & length(which(AB[i,14:23]==5))!=2 & length(which(AB[i,14:23]==AB[i,j]))!=2) {
AB.fun[i,j] = AB.fun$nr_ind[i] #if a taxon has a value of 8 for one FUN that it is the row maximum, the abundance value will be given to that functional group
} else if(AB[i,j]==max(AB[i,14:23]) & length(which(AB[i,14:23]==AB[i,j]))==2) {
AB.fun[i,j] = AB.fun$nr_ind[i]/2 #For instance, if a taxa is has the value 4 for two FUN and that it is the maximum, then abundance will be split between those two groups
}  else{ AB.fun[i,j] = 0
}
}
}
which(AB.fun$family=="Astacidae")
AB.fun[23,]
n = which(AB.fun$family=="Astacidae")
AB.fun[n,]
plot(AB.fun$nr_ind ~ rowSums(AB.fun[,14:23]),xlim=c(0,100),ylim=c(0,100))
which(AB.fun$nr_ind!=rowSums(AB.fun[,14:23])) #careful with rounding
which(is.na(AB.fun[,14:23]))
which(rowSums(AB.fun[,14:23])==0)
AB.fun[690,]
AB.fun$nr_ind[690]
rowSums(AB.fun[,14:23])[690]
fun.mat.IBCH = matrix(0,nrow=nrow(ENV),ncol=10)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
head(AB.fun)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
for(i in 14:23){
fun.mat.IBCH[,i-13] = tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),i],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum)
}
head(fun.mat.IBCH)
fun.mat.IBCH = matrix(0,nrow=nrow(ENV),ncol=10)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
i=14
AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),i]
fun.mat.IBCH = matrix(0,nrow=nrow(ENV),ncol=10)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
for(i in 14:23){
fun.mat.IBCH[,i-13] = tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),i],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum)
}
summary(fun.mat.IBCH)
fun.mat.IBCH = fun.mat.IBCH[,-which(colSums(fun.mat.IBCH)==0 | colnames(fun.mat.IBCH)=="other")]
summary(fun.mat.IBCH)
fun.mat.IBCH.stand = fun.mat.IBCH/rowSums(fun.mat.IBCH)
rowSums(fun.mat.IBCH.stand)
AB.fun = AB.fun[order(AB.fun$locality),] #need to be re-ordered numerically
head(rivnet$locality)
head(unique(AB.fun$locality))
head(tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),14],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum))
head(loc.rhine)
head(colnames(net.dist))
head(rivnet)
head(ENV)
head(AB.fun)
head(fun.mat.IBCH)
head(fun.mat.IBCH)
to.data
Dat
save(rivnet,fun.mat.IBCH,fun.mat.IBCH.stand,file=paste0(Dat,"Rivnet.RData"))
