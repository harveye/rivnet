#Set working directories
##################
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
##################
#Load BDM sampling sites and their coordinates
##################
LOC <- read.csv(paste0(Dat,"EPT_IBCH_Localities_EZGNR.csv"), header=T, sep=",", dec=".", stringsAsFactor=F)
LOC$locality <- as.integer(gsub(',', '', LOC$locality)) #sampling location for BDM sampling
LOC$EZGNR <- as.integer(gsub(',', '', LOC$EZGNR)) #subcatchment names in the RHINE network that were also sampled by BDM
AB <- read.table(paste0(Dat,"EPT_IBCH_Data20150826.txt"), header=T) #Abundance data per species per sampling
IBCH_SP <- read.table(paste0(Dat,"IBCH_SPECIES_20170515.txt"), header=T) #IBCH species functional groups
ENV <- read.table(paste0(Dat,"BDM_Data_For_Ryo_20160115.txt"), header=T) #ENV data per locality
#################
#FIX DATA ISSUES
##################
#####
# Not all localities in LOC dataset are present in species abundance data (AB)
match4 = match(LOC$locality,AB$locality,0)
min(match4)
#Thus for several of the localities in LOC there are no species abundance data
loc.missing = LOC$locality[which(match4==0)] #identify which localities are missing in AB
#Extract those localities from the datasets
LOC = LOC[-which(LOC$locality %in% loc.missing),] #remove them from LOC dataset
#####
#We only use IBCH - thus remove EPT only localities from data
AB = AB[which(AB$IBCH_EPT=="IBCH"),]
LOC = LOC[which(LOC$locality %in% AB$locality),]
ENV = ENV[which(ENV$locality %in% AB$locality),]
#verify that all datasets have the same numbers of locations
length(unique(LOC$locality));length(unique(ENV$locality));length(unique(AB$locality))
##################
#Sort ENV variables
##################
#Remove variables with too many NAs and 0s
many.NA = c("embankment_modifications","cascades","cascade_height","Q_amean_m3.s","Qvar_amean_m3.s","Q_amax_m3.s")
ENV = ENV[,-which(colnames(ENV) %in% many.NA)]
many.0 = c("stormsewage_m3.a","wastewater_m3.a","hydropower_count","canal_percentage","disposalsite_190207_percentage",
"disposalsite_2004_percentage","floodplainwetland_percentage","dam_count")
ENV = ENV[,-which(colnames(ENV) %in% many.0)]
#Remove rows with NAs
#ENV = na.omit(ENV) #that leaves 296 sites
#Change accordingly in other dataset
LOC = LOC[which(LOC$locality %in% ENV$locality),]
AB = AB[which(AB$locality %in% ENV$locality),]
#verify that all datasets have the same numbers of locations
length(unique(LOC$locality));length(unique(ENV$locality));length(unique(AB$locality))
#########################################################################
################# NETWORK METRICS
#########################################################################
##################
#Load the Rhine dendritic network (15140 subcatchments)
##################
load(paste0(Dat,"RHINE.rda")) #Loads the igraph object called SUBGRAPH2
##################
#In the Rhine network, rename the vertices according to BDM site names ("locality" rather than "EZGNR", 364 samples)
##################
for (i in 1:length(V(SUBGRAPH2)$name)){
x = match(V(SUBGRAPH2)$name[i],LOC$EZGNR,0) #provide the row in LOC that corresponds (same as x <- which(V(SUBGRAPH2)$name[i]==LOC$EZGNR)), but with match() one can decide of a specific value when no match is found between SUBGRAPH$name and LOC$EZGNR, which is necessary for the following if()
if(x != 0)
V(SUBGRAPH2)$name[i] <- LOC$locality[x]
}
#This should be 364 sites
length(unique(sub <- which(V(SUBGRAPH2)$name %in% LOC$locality)))
loc.rhine = V(SUBGRAPH2)$name[sub] #Extract the names and order of the localities
loc.rhine = loc.rhine[order(loc.rhine)]
##################
#Calculate network metrics for the whole network and then extract the values only for the nodes corresponding to BDM sampled sites
##################
BETW <- betweenness(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine],directed=T,nobigint=T,normalized=T)
DEG  <- degree(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine],mode="in") #number of adjacent edges to a vertex
CENT  <- closeness(SUBGRAPH2, vids=V(SUBGRAPH2)[loc.rhine],mode="out",normalized=F) #how many steps is required to access every other vertex from a given vertex
net.dist = distances(SUBGRAPH2, v=V(SUBGRAPH2)[loc.rhine], to=V(SUBGRAPH2)[loc.rhine])
#Given the Warning message for closeness
which(is.finite(CENT)) #An isolate vertex would give an 'Inf' measure
neighbors(SUBGRAPH2,v=2617, mode="all") #The vertext named in the Warning message is not disconnected
which(degree(SUBGRAPH2)==0) #Inquiry whether any vertex is isolate in the network
#It is possible that vertex 2617 is part of disconnected network - however it is not part of the data that we are using.
net.met = cbind(BETW,DEG,CENT)
rm(BETW);rm(DEG);rm(CENT)
#########################################################################
################# Environmental variables and LOC
#########################################################################
ENV = ENV[which(ENV$locality %in% loc.rhine),] #Select only site from the RHIN
ENV$drainage #only RHEIN remains
length(unique(ENV$locality)) #should be 364
ENV$distance_to_outlet[ENV$locality==650243] #value of dist.to.outlet for locality 521174 before re-ordering
ENV = ENV[match(loc.rhine,ENV$locality),] #re-order to match with locality order of network metrics
ENV$distance_to_outlet[ENV$locality==650243] #should be same value if re-ordering worked properly
ENV= droplevels(ENV)
LOC = LOC[which(LOC$locality %in% loc.rhine),]
LOC = LOC[match(loc.rhine,LOC$locality),]
#########################################################################
################# Merge data
#########################################################################
##################
#Verify that network metrics that we just calculated are in the same order as Environmental variables
##################
head(colnames(net.dist)) #order in which the network metrics are
head(ENV$locality) #order in which ENV data is
head(LOC$locality)
detach("package:igraph", unload=TRUE)
##################
#Merge together
##################
rivnet = as.data.frame(cbind(LOC$xkoord,LOC$ykoord,ENV,net.met))
row.names(rivnet) = 1:nrow(rivnet)
rm(net.met)
colnames(rivnet)[1:2] = c("x","y")
rivnet$x = as.integer(gsub(",","",rivnet$x))
rivnet$y = as.integer(gsub(",","",rivnet$y))
length(unique(rivnet$locality)) #should be 364
#########################################################################
################# Species abundance data
#########################################################################
##Species abundance dataset
AB = AB[which(AB$locality %in% loc.rhine),] #select only sites from the RHEIN
length(unique(AB$locality)) #should be 364
AB$drainage #only RHEIN remains
AB = droplevels(AB) #drop unused level
#########################################################################
################# Functional groups
#########################################################################
##################
#Functional group per family (IBCH)
##################
#Create new columns for each functional group in AB dataset
AB$grazer_scraper = 0
AB$miner = 0
AB$xylophagous = 0
AB$shredder = 0
AB$gatherer_collector = 0
AB$active_filter_feeder = 0
AB$passive_filter_feeder = 0
AB$predator = 0
AB$parasite = 0
AB$other = 0
for(i in 1:nrow(AB)){
if(AB$IBCH_EPT[i] == "IBCH")  AB[i,14:23] = IBCH_SP[which(IBCH_SP$family %in% AB$family[i]),6:15]
}
##################
#Verify that the loop worked properly
##################
#The sum of columns 14:23 should be 10
summary(rowSums(AB[which(AB$IBCH_EPT=="IBCH"),14:23])) # not good
miss.fam = unique(AB$family[which(rowSums(AB[,14:23])==0)])
miss.fam
#1 family for which we could not informaiton and experts did not know
AB = AB[-which(AB$family %in% miss.fam),] #Remove them for now
summary(rowSums(AB[which(AB$IBCH_EPT=="IBCH"),14:23])) # good!
#pick random species or family from this list
AB$family[which(AB$IBCH_EPT=="IBCH")]
#copy and paste below and make sure that the information corresponds
AB[which(AB$family=="Empididae")[1],14:23]
IBCH_SP[which(IBCH_SP$family=="Empididae"),6:15]
##################
#Distribute species abundances (nr_ind) to each functional group
##################
#First: Convert functional group columns into relative proportions (sum = 1 instead of 10 as it is now)
#  AB.fun = AB
#  AB.fun[,14:23] = AB.fun[,14:23]/10
# #Second: Divide columns nr_ind by each functional group columns
#  for(i in 1:nrow(AB.fun)){
#    for(j in 14:23) {
#      if(AB.fun[i,j]!=0) AB.fun[i,j] = AB.fun$nr_ind[i]*AB.fun[i,j]
#    }
#  }
#WARNING
#Alternative way: Put all nr_ind for one species/family into the functional group with highest ranking
AB.fun = AB
AB.fun[,14:23] = AB.fun[,14:23]/10
for(i in 1:nrow(AB.fun)){
for(j in 14:23) {
if(AB[i,j]==5 & length(which(AB[i,14:23]==5))==2) { AB.fun[i,j] = AB.fun$nr_ind[i]*AB.fun[i,j] #if two 5 then abundance will be divived in both functional groups
} else if(AB[i,j]==max(AB[i,14:23]) & length(which(AB[i,14:23]==5))!=2 & length(which(AB[i,14:23]==AB[i,j]))!=2) {
AB.fun[i,j] = AB.fun$nr_ind[i] #if a taxon has a value of 8 for one FUN that it is the row maximum, the abundance value will be given to that functional group
} else if(AB[i,j]==max(AB[i,14:23]) & length(which(AB[i,14:23]==AB[i,j]))==2) {
AB.fun[i,j] = AB.fun$nr_ind[i]/2 #For instance, if a taxa is has the value 4 for two FUN and that it is the maximum, then abundance will be split between those two groups
}  else{ AB.fun[i,j] = 0
}
}
}
#Third: verify that it worked well
n = which(AB.fun$family=="Astacidae")
AB.fun[n,]
plot(AB.fun$nr_ind ~ rowSums(AB.fun[,14:23]),xlim=c(0,100),ylim=c(0,100))
which(AB.fun$nr_ind!=rowSums(AB.fun[,14:23])) #careful with rounding
which(is.na(AB.fun[,14:23]))
which(rowSums(AB.fun[,14:23])==0)
AB.fun[690,]
AB.fun$nr_ind[690]
rowSums(AB.fun[,14:23])[690]
##################
#Sum up the number of individuals per functional group per sites
##################
fun.mat.IBCH = matrix(0,nrow=nrow(ENV),ncol=10)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
for(i in 14:23){
fun.mat.IBCH[,i-13] = tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),i],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum)
}
#Remove trophic level with no information and the group "other"
#library(matrixStats)
summary(fun.mat.IBCH)
# fun.mat.IBCH = fun.mat.IBCH[,-which(colMedians(fun.mat.IBCH)<=0.00 | colnames(fun.mat.IBCH)=="other")]
fun.mat.IBCH = fun.mat.IBCH[,-which(colSums(fun.mat.IBCH)==0 | colnames(fun.mat.IBCH)=="other")]
#detach("package:matrixStats", unload=TRUE)
##################
#Transform into relative abundance per site
##################
fun.mat.IBCH.stand = fun.mat.IBCH/rowSums(fun.mat.IBCH)
rowSums(fun.mat.IBCH.stand)
#WARNING:before going further make sure again that datasets are all in the same locality order
AB.fun = AB.fun[order(AB.fun$locality),] #need to be re-ordered numerically
head(rivnet$locality)
head(unique(AB.fun$locality))
head(tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),14],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum))
head(loc.rhine)
head(colnames(net.dist))
#########################################################################
################# Diversity
#########################################################################
# #need to make sure that all datasets used are in the same order!!
# head(loc.rhine)
# head(unique(AB.fun$locality))
# head(rivnet$locality)
#
# rivnet$alpha_all <- 0
# for(i in 1:358){
#   rivnet$alpha_all[i] <- length(AB.fun$species[which(AB.fun$locality==loc.rhine[i])])}
#
# #Number of species EPT only
# rivnet$alpha_EPT2 <- 0
# for(i in 1:358){
#   rivnet$alpha_EPT2[i] <- length(unique(AB.fun$species[which(AB.fun$locality==loc.rhine[i] & AB.fun$IBCH_EPT=="EPT")]))}
#
# #alpha_fam gives number of families per location (IBCH only)
# rivnet$alpha_fam <- NA
# for(i in 1:358){
#   rivnet$alpha_fam[i] <- length(unique(AB.fun$family[which(AB.fun$locality==loc.rhine[i] & AB.fun$IBCH_EPT=="IBCH")]))}
#
#
head(rivnet)
rivnet <- rivnet[,-c(1:3)] #remove locations of site for copyright purpose
head(rivnet)
save(rivnet,fun.mat.IBCH,fun.mat.IBCH.stand,file=paste0(output,"Rivnet.RData"))
rm(list=ls())
library(vegan)
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
#...Load RDATA from Rivnet_DatMan.R
load(paste0(output,"Rivnet.RData"))
View(rivnet)
sel.var0 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"watercourse_bdm_m","area_bdm_m2","slope_mean","slope_max","carbonate_per_carbonatesilicate",
"hydro_class","area_total_m2","watercourse_total_m","decidious_per_forest","Masl_2","DEG","CENT")
#Land use predictors from Swiss Federal Office (as used in Seymour, M., et al., 2016. Basic and Applied Ecology 17:134–144.)
land.use = c("Water_prop_5km","Agriculture_prop_5km","Woods_prop_5km","Meadows_prop_5km","Settlement_prop_5km",
"Calcite_prop_5km")
#Land use predictors (as used in Kaelin, K., and F. Altermatt. 2016. Aquatic Ecology 50:283–295.)
agri.use = c("field_percentage","legume_percentage","potato_percentage",
"cereal_percentage","corn_percentage","fruit_percentage","rapeseed_percentage","rootvegetable_percentage","vegetable_percentage",
"vine_percentage","forest_percentage","green_percentage","facade_percentage","roof_percentage","facaderoof_percentage",
"settlement_percentage","track_percentage","street_percentage")
##################
#Co-linearity within land.use and agri.use data
#############
##################
# Generate land-use change index
##################
land.dat = decostand(rivnet[,land.use],"chi.square",na.rm=T)
#Principal component analysis
land.use.pca = cca(land.dat)
rivnet$land1 = scores(land.use.pca,scale=0)$sites[,1]
rivnet$land2 = scores(land.use.pca,scale=0)$sites[,2]
sel.var1 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","carbonate_per_carbonatesilicate","hydro_class","area_total_m2","watercourse_total_m",
"decidious_per_forest","Masl_2","DEG","CENT","land1","land2")
length(sel.var1)
sel.var = c("Strahler_order","catchment","width","depth","var_depth","distance_to_outlet",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","hydro_class","decidious_per_forest",
"Masl_2","DEG","CENT","land1","land2")
is.num = sapply(rivnet[,sel.var],is.numeric) #ask whether sel.var is numeric or other
nums.names = names(which(is.num==T)) #extract names of sel.var that are num
factors = names(which(is.num==F)) #extract names of sel.var that factors
nums = decostand(rivnet[,nums.names],"standardize") #standardize the numerical variables
VAR = cbind(nums,rivnet[,factors]) #put them all back together
dist.IBCH.mat = vegdist(decostand(fun.mat.IBCH,"hell"),"euclidean")
#Changes in absolute composition and abundances
dist.IBCH.mat.bray= vegdist(decostand(fun.mat.IBCH,"hell"),"bray")
#Null expectation after controlling for alpha diversity
dist.IBCH.mat.null= vegdist(decostand(fun.mat.IBCH,"hell"),"raup")
Y = na.omit(cbind(fun.mat.IBCH,VAR))
rm(list=ls())
#..........................................#
#...........RivNet project.................#
#..........................................#
#..........................................................................................................................................#
#... Collaborators: Eric Harvey and Florian Altermatt                                                    #
#... Author of the script: Eric Harvey                                                                                                     #
#                                                                                             #                                                                       #
#..........................................................................................................................................#
#This script reproduce the Ordination analysis from the manuscript
#It uses Rivernet.Rdata produced by the RivNet_DatMan.R script
rm(list=ls())
#########################################################################
################# SORT PREDICTORS FOR ANALYSES
#########################################################################
##################
#Libraries
##################
library(vegan)
##################
#Set working directories
##################
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
#...Load RDATA from Rivnet_DatMan.R
load(paste0(output,"Rivnet.RData"))
##################
#Extract predictors
##################
#Predictors (except land use)
sel.var0 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"watercourse_bdm_m","area_bdm_m2","slope_mean","slope_max","carbonate_per_carbonatesilicate",
"hydro_class","area_total_m2","watercourse_total_m","decidious_per_forest","Masl_2","DEG","CENT")
#Land use predictors from Swiss Federal Office (as used in Seymour, M., et al., 2016. Basic and Applied Ecology 17:134–144.)
land.use = c("Water_prop_5km","Agriculture_prop_5km","Woods_prop_5km","Meadows_prop_5km","Settlement_prop_5km",
"Calcite_prop_5km")
#Land use predictors (as used in Kaelin, K., and F. Altermatt. 2016. Aquatic Ecology 50:283–295.)
agri.use = c("field_percentage","legume_percentage","potato_percentage",
"cereal_percentage","corn_percentage","fruit_percentage","rapeseed_percentage","rootvegetable_percentage","vegetable_percentage",
"vine_percentage","forest_percentage","green_percentage","facade_percentage","roof_percentage","facaderoof_percentage",
"settlement_percentage","track_percentage","street_percentage")
##################
#Co-linearity within land.use and agri.use data
##################
library(psych)
pdf(paste0(fig.p,'Cor_matrix_land.use.pdf'),width=15,height = 10)
pairs.panels(cbind(rivnet[,land.use],rivnet[,agri.use]),smooth=F,density=T,ellipses=F,lm=T,digits=3,scale=T, cor = T, rug=T)
dev.off()
detach("package:psych", unload=TRUE)
#The agri.use data is basically a breakdown in smaller categories of the land.use data. However there are many missing data.
#We will thus use the land.use data
##################
# Generate land-use change index
##################
land.dat = decostand(rivnet[,land.use],"chi.square",na.rm=T)
#Principal component analysis
land.use.pca = cca(land.dat)
#Diagnosis plots
source ("http://www.davidzeleny.net/anadat-r/doku.php/en:numecolr:evplot?do=export_code&codeblock=0")
pdf(paste0(fig.p,'PCA_landuse_diagnosis.pdf'),width=15,height = 10)
# select the data frame with eigenvalues of particular axes:
ev.land.use <- land.use.pca$CA$eig
# calculate axis-importance and draw the barplots:
evplot (ev.land.use)
dev.off()
#PCA plots
pdf(paste0(fig.p,'land.use_pca.pdf'),width=15,height = 10)
scores.land.use = scores(land.use.pca,scaling=0)
plot(land.use.pca,type='none',display=c('bp','sites'),xlim=c(-3,3),ylim=c(-3,3),xlab="CA1 (42%)",ylab="CA2 (30%)")
text(land.use.pca, display="sp", col="black",cex=1)
points(land.use.pca, display="sites", col="red",cex=1)
dev.off()
#Extract first two PCA axes for further analysis
rivnet$land1 = scores(land.use.pca,scale=0)$sites[,1]
rivnet$land2 = scores(land.use.pca,scale=0)$sites[,2]
##################
# Co-linearity among all predictors
##################
sel.var1 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","carbonate_per_carbonatesilicate","hydro_class","area_total_m2","watercourse_total_m",
"decidious_per_forest","Masl_2","DEG","CENT","land1","land2")
length(sel.var1)
library(psych)
pdf(paste0(fig.p,'Cor_finalpredictors.pdf'),width=15,height = 10)
pairs.panels(rivnet[,sel.var1],smooth=F,density=T,ellipses=F,lm=T,digits=3,scale=T, cor = T, rug=T)
dev.off()
detach("package:psych", unload=TRUE)
#remove "area_total_m2" and "watercourse_total_m" (0.99 correlations!) + correlations of 0.99 and 1 with "catchment
sel.var = c("Strahler_order","catchment","width","depth","var_depth","distance_to_outlet",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","hydro_class","decidious_per_forest",
"Masl_2","DEG","CENT","land1","land2")
##################
#Transform data
##################
#Many numerical variables in different units - need to standardize!
is.num = sapply(rivnet[,sel.var],is.numeric) #ask whether sel.var is numeric or other
nums.names = names(which(is.num==T)) #extract names of sel.var that are num
factors = names(which(is.num==F)) #extract names of sel.var that factors
nums = decostand(rivnet[,nums.names],"standardize") #standardize the numerical variables
VAR = cbind(nums,rivnet[,factors]) #put them all back together
##################
#Extract dissimilarity matrices
##################
#Changes in relative proportion
dist.IBCH.mat = vegdist(decostand(fun.mat.IBCH,"hell"),"euclidean")
#Changes in absolute composition and abundances
dist.IBCH.mat.bray= vegdist(decostand(fun.mat.IBCH,"hell"),"bray")
#Null expectation after controlling for alpha diversity
dist.IBCH.mat.null= vegdist(decostand(fun.mat.IBCH,"hell"),"raup")
#########################################################################
################# FIGURE AND ANALYSES
#########################################################################
##################
#Distanced-based RDA
##################
#Need to remove NAs for the step-wise approach to work
Y = na.omit(cbind(fun.mat.IBCH,VAR))
################
#Full data
#Full model
full.IBCH = capscale(decostand(Y[,c(1:7)],"hell") ~ ., Y[,c(8:ncol(Y))],distance="euclidean") #Hellinger divide by row sum thus this is the equivalent of euclidean distance on relative abundance
#anova(full.IBCH)
#Model selection
(IBCH.sel = ordiR2step(capscale(decostand(Y[,c(1:7)],"hell") ~ 1, Y[,c(8:ncol(Y))], distance="euclidean"), scope = formula(full.IBCH)))
anova(IBCH.sel)
RsquareAdj(IBCH.sel)
names(IBCH.sel)
IBCH.sel
#Save result tables
IBCH.anova = anova(IBCH.sel, by="terms", permu=200)
write.csv(IBCH.anova,paste0(output,'IBCH_Ord_model.csv'))
##################
#Figures
##################
#Select variables to plot
IBCH.anova = read.csv(paste0(output,"IBCH_Ord_model.csv"))
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var = colnames(var.sel.IBCH)
###########
##Ordination
pdf(paste0(fig.p,'Ord_figure.pdf'),width=8,height = 6)
ordiplot(IBCH.sel,display=c("sp","bp"),type="n",scaling=2)
text(IBCH.sel, display="sp", col="black",cex=0.8,labels=c("GSC","SHR","GAT","AFF","PFF","PRED","PAR"))
text(IBCH.sel, display="cn", col="blue",cex=0.5)
points(IBCH.sel, display="cn", cex=0.5)
legend("bottomleft",legend=paste("adjRsquare",RsquareAdj((IBCH.sel))[2]),bty="n",cex=0.5)
dev.off()
###########
##Scatter plots
#IBCH - Variables from db=RDA
pdf(paste0(fig.p,"Ord_scatterplots_selvar.pdf"), width=8, height=8)
for(i in 1:ncol(var.sel.IBCH)) {
for(j in 1:ncol(fun.mat.IBCH)) {
plot(fun.mat.IBCH[,j] ~ var.sel.IBCH[,i],pch=16,ylab=paste(colnames(fun.mat.IBCH)[j],"prop"),xlab=colnames(var.sel.IBCH)[i])
}
}
dev.off()
detach("package:vegan", unload=TRUE)
##################
#Save output for next step (path analysis)
##################
save(rivnet,fun.mat.IBCH,fun.mat.IBCH.stand,file=paste0(output,"Rivnet_SEM.RData"))
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
##################
#Load variables
##################
#Biotic components (from RivNet_ORD.R script)
load(paste0(output,"Rivnet_SEM.RData"))
View(rivnet)
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
R <- "../rivnet/R/"
library(tidyverse)
source(paste0(R,"Multiplot.R"))
load(paste0(output,"Rivnet.RData"))
J = cbind(rivnet$year,fun.mat.IBCH)
J = as.data.frame(J)
colnames(J)[1] = "year"
J$year = as.factor(J$year)
J = J[-which(J$year==9999),]
J = droplevels(J)
p1 <- ggplot(data=J, mapping=aes(x=year,y=grazer_scraper)) +
geom_boxplot()
p2 <- ggplot(data=J, mapping=aes(x=year,y=shredder)) +
geom_boxplot()
p3 <- ggplot(data=J, mapping=aes(x=year,y=gatherer_collector)) +
geom_boxplot()
p4 <- ggplot(data=J, mapping=aes(x=year,y=active_filter_feeder)) +
geom_boxplot()
p5 <- ggplot(data=J, mapping=aes(x=year,y=passive_filter_feeder)) +
geom_boxplot()
p6 <- ggplot(data=J, mapping=aes(x=year,y=predator)) +
geom_boxplot()
p7 <- ggplot(data=J, mapping=aes(x=year,y=parasite)) +
geom_boxplot()
multiplot(p1,p2,p3,p4,p5,p6,p7,cols=2)
