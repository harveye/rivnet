} else if(AB[i,j]==max(AB[i,14:23]) & length(which(AB[i,14:23]==AB[i,j]))==2) {
AB.fun[i,j] = AB.fun$nr_ind[i]/2 #For instance, if a taxa is has the value 4 for two FUN and that it is the maximum, then abundance will be split between those two groups
}  else{ AB.fun[i,j] = 0
}
}
}
n = which(AB.fun$family=="Astacidae")
AB.fun[n,]
plot(AB.fun$nr_ind ~ rowSums(AB.fun[,14:23]),xlim=c(0,100),ylim=c(0,100))
which(AB.fun$nr_ind!=rowSums(AB.fun[,14:23])) #careful with rounding
which(is.na(AB.fun[,14:23]))
which(rowSums(AB.fun[,14:23])==0)
AB.fun[690,]
AB.fun$nr_ind[690]
rowSums(AB.fun[,14:23])[690]
fun.mat.IBCH = matrix(0,nrow=nrow(ENV),ncol=10)
colnames(fun.mat.IBCH) = colnames(AB)[14:23]
for(i in 14:23){
fun.mat.IBCH[,i-13] = tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),i],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum)
}
summary(fun.mat.IBCH)
fun.mat.IBCH = fun.mat.IBCH[,-which(colSums(fun.mat.IBCH)==0 | colnames(fun.mat.IBCH)=="other")]
fun.mat.IBCH.stand = fun.mat.IBCH/rowSums(fun.mat.IBCH)
rowSums(fun.mat.IBCH.stand)
AB.fun = AB.fun[order(AB.fun$locality),] #need to be re-ordered numerically
head(rivnet$locality)
head(unique(AB.fun$locality))
head(tapply(AB.fun[which(AB.fun$IBCH_EPT=="IBCH"),14],AB.fun$locality[which(AB.fun$IBCH_EPT=="IBCH")],sum))
head(loc.rhine)
head(colnames(net.dist))
save(rivnet,fun.mat.IBCH,fun.mat.IBCH.stand,file=paste0(output,"Rivnet.RData"))
output
fun.g = colnames(AB.fun)[14:22]
outcome = data.frame()
for(i in 1:9){
fam = unique(AB.fun$family[which(AB.fun[,fun.g[i]]>0)])
group = rep(fun.g[i],length(fam))
final = data.frame(fam,group)
outcome = rbind.data.frame(output,final)
}
write.csv(outcome,paste0(output,'Family_classification.csv'))
fun.g = colnames(AB.fun)[14:22]
outcome = data.frame()
for(i in 1:9){
fam = unique(AB.fun$family[which(AB.fun[,fun.g[i]]>0)])
group = rep(fun.g[i],length(fam))
final = data.frame(fam,group)
outcome = rbind.data.frame(outcome,final)
}
write.csv(outcome,paste0(output,'Family_classification.csv'))
Script <- "../rivnet/scripts/" #Working directory for scripts
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
load(paste0(output,"Rivnet.RData"))
sel.var0 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"watercourse_bdm_m","area_bdm_m2","slope_mean","slope_max","carbonate_per_carbonatesilicate",
"hydro_class","area_total_m2","watercourse_total_m","decidious_per_forest","Masl_2","DEG","CENT")
land.use = c("Water_prop_5km","Agriculture_prop_5km","Woods_prop_5km","Meadows_prop_5km","Settlement_prop_5km",
"Calcite_prop_5km")
agri.use = c("field_percentage","legume_percentage","potato_percentage",
"cereal_percentage","corn_percentage","fruit_percentage","rapeseed_percentage","rootvegetable_percentage","vegetable_percentage",
"vine_percentage","forest_percentage","green_percentage","facade_percentage","roof_percentage","facaderoof_percentage",
"settlement_percentage","track_percentage","street_percentage")
library(psych)
pdf(paste0(fig.p,'Cor/','Cor_matrix_land.use.pdf'),width=15,height = 10)
pairs.panels(cbind(rivnet[,land.use],rivnet[,agri.use]),smooth=F,density=T,ellipses=F,lm=T,digits=3,scale=T, cor = T, rug=T)
dev.off()
detach("package:psych", unload=TRUE)
fig.p
library(psych)
pdf(paste0(fig.p,'Cor_matrix_land.use.pdf'),width=15,height = 10)
pairs.panels(cbind(rivnet[,land.use],rivnet[,agri.use]),smooth=F,density=T,ellipses=F,lm=T,digits=3,scale=T, cor = T, rug=T)
dev.off()
detach("package:psych", unload=TRUE)
agri.use = c("field_percentage","legume_percentage","potato_percentage",
"cereal_percentage","corn_percentage","fruit_percentage","rapeseed_percentage","rootvegetable_percentage","vegetable_percentage",
"vine_percentage","forest_percentage","green_percentage","settlement_percentage","track_percentage","street_percentage")
head(rivnet)
land.dat = decostand(land.use,"chi.square",na.rm=T)
library(vegan)
land.dat = decostand(land.use,"chi.square",na.rm=T)
land.dat = decostand(rivnet[,land.dat],"chi.square",na.rm=T)
land.dat = decostand(rivnet[,land.use],"chi.square",na.rm=T)
land.use.pca = cca(land.dat)
source ("http://www.davidzeleny.net/anadat-r/doku.php/en:numecolr:evplot?do=export_code&codeblock=0")
pdf(paste0(fig.p,'PCA_landuse_diagnosis.pdf'),width=15,height = 10)
# select the data frame with eigenvalues of particular axes:
ev.land.use <- land.use.pca$CA$eig
# calculate axis-importance and draw the barplots:
evplot (ev.land.use)
dev.off()
#PCA plots
pdf(paste0(fig.p,'land.use_pca.pdf'),width=15,height = 10)
scores.land.use = scores(land.use.pca,scaling=0)
plot(land.use.pca,type='none',display=c('bp','sites'),xlim=c(-3,3),ylim=c(-3,3),xlab="CA1 (42%)",ylab="CA2 (30%)")
text(land.use.pca, display="sp", col="black",cex=1)
points(land.use.pca, display="sites", col="red",cex=1)
dev.off()
rivnet$land1 = scores(land.use.pca,scale=0)$sites[,1]
rivnet$land2 = scores(land.use.pca,scale=0)$sites[,2]
sel.var1 = c("Strahler_order","distance_to_outlet","catchment","width","depth","var_depth",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","carbonate_per_carbonatesilicate","hydro_class","area_total_m2","watercourse_total_m",
"decidious_per_forest","Masl_2","DEG","CENT","land1","land2")
length(sel.var1)
34-2+6
-0.291*0.247
library(psych)
pdf(paste0(fig.p,'Cor_finalpredictors.pdf'),width=15,height = 10)
pairs.panels(rivnet[,sel.var1],smooth=F,density=T,ellipses=F,lm=T,digits=3,scale=T, cor = T, rug=T)
dev.off()
detach("package:psych", unload=TRUE)
sel.var = c("Strahler_order","catchment","width","depth","var_depth","distance_to_outlet",
"var_waterlevel","river_bed_modified","natural_cascades","width_riparian_left","width_riparian_right",
"mud","turbidity","foam","FeS","clogging","waste","periphyton","algae","moss","macrophytes","MSK_class",
"slope_mean","slope_max","hydro_class","decidious_per_forest",
"Masl_2","DEG","CENT","land1","land2")
is.num = sapply(rivnet[,sel.var],is.numeric) #ask whether sel.var is numeric or other
nums.names = names(which(is.num==T)) #extract names of sel.var that are num
factors = names(which(is.num==F)) #extract names of sel.var that factors
nums = decostand(rivnet[,nums.names],"standardize") #standardize the numerical variables
VAR = cbind(nums,rivnet[,factors]) #put them all back together
dist.IBCH.mat = vegdist(decostand(fun.mat.IBCH,"hell"),"euclidean")
#Changes in absolute composition and abundances
dist.IBCH.mat.bray= vegdist(decostand(fun.mat.IBCH,"hell"),"bray")
#Null expectation after controlling for alpha diversity
dist.IBCH.mat.null= vegdist(decostand(fun.mat.IBCH,"hell"),"raup")
Y = na.omit(cbind(fun.mat.IBCH,VAR))
full.IBCH = capscale(decostand(Y[,c(1:7)],"hell") ~ ., Y[,c(8:ncol(Y))],distance="euclidean") #Hellinger divide by row sum thus this is the equivalent of euclidean distance on relative abundance
(IBCH.sel = ordiR2step(capscale(decostand(Y[,c(1:7)],"hell") ~ 1, Y[,c(8:ncol(Y))], distance="euclidean"), scope = formula(full.IBCH)))
anova(IBCH.sel)
RsquareAdj(IBCH.sel)
names(IBCH.sel)
IBCH.sel
lala = c(7.333,1.968,0.775,0.437,0.262,0.118,0.068)
lala[2]/sum(lala)
IBCH.anova = anova(IBCH.sel, by="terms", permu=200)
write.csv(IBCH.anova,paste0(fig.p,'IBCH_Ord_model.csv'))
write.csv(IBCH.anova,paste0(output,'IBCH_Ord_model.csv'))
plot(Y$distance_to_outlet ~ Y$Masl_2)
x = rivnet[which(rivnet$Masl_2<=710),]
x = rivnet[which(rivnet$Masl_2<=710),] #select data where Altitute is lower or equal to 710 meters
plot(x$distance_to_outlet ~ x$Masl_2)
IBCH.anova = read.csv(paste0(output,'db_RDA/',"IBCH_model.csv"))
IBCH.anova = read.csv(paste0(output,"IBCH_Ord_model.csv"))
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var = colnames(var.sel.IBCH)
ordiplot(IBCH.sel,display=c("sp","bp"),type="n",scaling=2)
text(IBCH.sel, display="sp", col="black",cex=0.8,labels=c("GSC","SHR","GAT","AFF","PFF","PRED","PAR"))
text(IBCH.sel, display="cn", col="blue",cex=0.5)
points(IBCH.sel, display="cn", cex=0.5)
legend("bottomleft",legend=paste("adjRsquare",RsquareAdj((IBCH.sel))[2]),bty="n",cex=0.5)
pdf(paste0(fig.p,'Ord_figure.pdf'),width=8,height = 6)
ordiplot(IBCH.sel,display=c("sp","bp"),type="n",scaling=2)
text(IBCH.sel, display="sp", col="black",cex=0.8,labels=c("GSC","SHR","GAT","AFF","PFF","PRED","PAR"))
text(IBCH.sel, display="cn", col="blue",cex=0.5)
points(IBCH.sel, display="cn", cex=0.5)
legend("bottomleft",legend=paste("adjRsquare",RsquareAdj((IBCH.sel))[2]),bty="n",cex=0.5)
dev.off()
var.sel.IBCH
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var = colnames(var.sel.IBCH)
pdf(paste0(fig.p,"Ord_scatterplots_selvar.pdf"), width=8, height=8)
for(i in 1:ncol(var.sel.IBCH)) {
for(j in 1:ncol(fun.mat.IBCH)) {
plot(fun.mat.IBCH[,j] ~ var.sel.IBCH[,i],pch=16,ylab=paste(colnames(fun.mat.IBCH)[j],"prop"),xlab=colnames(var.sel.IBCH)[i])
}
}
dev.off()
detach("package:vegan", unload=TRUE)
detach("package:packfor", unload=TRUE)
fun.mat.IBCH
save(rivnet,fun.mat.IBCH,fun.mat.IBCH.stand,file=paste0(output,"Rivnet_SEM.RData"))
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
library(SwissRiverPlot)
install.packages("../RivNet/R/SwissRiverPlot", repos = NULL, type="source")
library(SwissRiverPlot)
library(plotrix)
source(paste0(R,"/floating.pieF.R"))
paste0(R,"/floating.pieF.R")
R <- "../rivnet/R/"
source(paste0(R,"/floating.pieF.R"))
source(paste0(R,"/scale_bar.R"))
load(paste0(output,"/Rivnet_SEM.RData"))
paste0(fig.p,"PieCharts_IBCH.pdf")
pdf(paste0(fig.p,"PieCharts_IBCH.pdf"), width=13, height=8)
#Load map
river_plot(border_outline = T, width_border = 1,lakes=F,
plot_rhone=F, plot_ticino=F, plot_inn=F,lines_rhone=F, lines_ticino=F, lines_inn=F, col_country="white",
width_order = T, cex_order=1,orders=3,
axes="degree",scalebar=T)
#Add pie charts
#Create a custom color scale for all figures
myColors <- c('#4daf4a','#a65628','#2c7bb6','#ff7f00','#ffff33','#e41a1c','#f781bf')
#'#984ea3'old GAT color
names(myColors) <- colnames(fun.mat.IBCH)
for(i in 1:364){
floating.pieF(xpos=rivnet$x[i],ypos=rivnet$y[i],x=as.integer(fun.mat.IBCH[i,]),radius=2500,
col=myColors)
}
dev.off()
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
load(paste0(output,"Rivnet_SEM.RData"))
IBCH.anova = read.csv(paste0(output,'db_RDA/',"IBCH_Ord_model.csv"))
IBCH.anova = read.csv(paste0(output,"IBCH_Ord_model.csv"))
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var.names = c(colnames(var.sel.IBCH),"distance_to_outlet")
var = rivnet[,var.names]
indx <- sapply(var,is.factor)
var[indx] <- lapply(var[indx], function(x) as.numeric(x))
head(var)
indx
IBCH.anova = read.csv(paste0(output,"IBCH_Ord_model.csv"))
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var.names = c(colnames(var.sel.IBCH),"distance_to_outlet")
var = rivnet[,var.names]
var
head(var)
indx <- sapply(var,is.factor)
var[indx] <- lapply(var[indx], function(x) as.numeric(x))
head(var)
var.sem = data.frame(var,fun.mat.IBCH[,-7])
var.sem$decidious_per_forest = var.sem$decidious_per_forest*10
var.sem$Masl_2 = var.sem$Masl_2/100
var.sem$distance_to_outlet = var.sem$distance_to_outlet/100000
var.sem$grazer_scraper = var.sem$grazer_scraper/10
var.sem$shredder = var.sem$shredder/100
var.sem$gatherer_collector = var.sem$gatherer_collector/100
var.sem$land1 = var.sem$land1*10
var.sem$active_filter_feeder = var.sem$active_filter_feeder/100
var.sem$passive_filter_feeder = var.sem$passive_filter_feeder/100
var.sem$predator = var.sem$predator/10
head(var.sem)
library(lavaan)
sem.mod8 <- "
# Regression paths
predator ~ Masl_2 + land1 + distance_to_outlet + var_depth + turbidity + active_filter_feeder + passive_filter_feeder + grazer_scraper + MSK_class + foam + mud
active_filter_feeder ~ Masl_2 + land1 + decidious_per_forest + turbidity + var_depth + mud
passive_filter_feeder ~ turbidity + shredder + foam
grazer_scraper ~ decidious_per_forest + MSK_class + mud + foam + gatherer_collector + distance_to_outlet
gatherer_collector ~ Masl_2 + land1 + distance_to_outlet + MSK_class + mud + foam + decidious_per_forest
shredder ~ Masl_2 + land1 + distance_to_outlet + MSK_class + mud + foam + gatherer_collector + decidious_per_forest
#Co-variance
Masl_2 ~~ land1
Masl_2 ~~ distance_to_outlet
Masl_2 ~~ decidious_per_forest
land1 ~~ distance_to_outlet
active_filter_feeder ~~ gatherer_collector
decidious_per_forest ~~ land1
"
mod.fit8 = sem(sem.mod8,data=var.sem,fixed.x=F) #run the SEM
mod.fit8 #visualize fitting results
summary(mod.fit8,stand=T,rsq=T) #visualize path coefficients
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
load(paste0(output,"Rivnet_SEM.RData"))
IBCH.anova = read.csv(paste0(fig.p,"IBCH_model.csv"))
IBCH.anova = read.csv(paste0(output,"IBCH_model.csv"))
IBCH.anova = read.csv(paste0(output,"IBCH_Ord_model.csv"))
var.sel.IBCH = rivnet[,which(colnames(rivnet) %in% IBCH.anova$X)]
var.names = c(colnames(var.sel.IBCH),"distance_to_outlet")
var = rivnet[,var.names]
library(vegan)
sp = colnames(fun.mat.IBCH)
var.sem = data.frame(var,fun.mat.IBCH[,sp])
var.sem[,sp] = sapply(var.sem[,sp],function(x) decostand(x,"log"))
sp
var.sem$decidious_per_forest = var.sem$decidious_per_forest*10
var.sem$Masl_2 = var.sem$Masl_2/100
var.sem$distance_to_outlet = var.sem$distance_to_outlet/100000
var.sem$land1 = var.sem$land1*10
head(var.sem)
fact = c("var_depth","mud","turbidity","foam","MSK_class")
library(lavaan)
sem.mod16 <- "
#..Regional scale
decidious_per_forest ~ Masl_2
decidious_per_forest ~~ distance_to_outlet
land1 ~ Masl_2
land1~~distance_to_outlet
distance_to_outlet ~ Masl_2
#..Habitat scale
mud ~ Masl_2 + MSK_class
MSK_class ~ Masl_2 + distance_to_outlet
foam ~ land1
var_depth ~  MSK_class + land1
turbidity ~ distance_to_outlet + var_depth + foam
land1 ~~ decidious_per_forest
decidious_per_forest ~~ MSK_class
#..Trophic structure
grazer_scraper ~~  gatherer_collector + passive_filter_feeder + shredder + decidious_per_forest
gatherer_collector  ~~ passive_filter_feeder + active_filter_feeder
shredder ~~ gatherer_collector + active_filter_feeder
predator ~ passive_filter_feeder + grazer_scraper + shredder + passive_filter_feeder + gatherer_collector + land1
shredder ~ decidious_per_forest + Masl_2 + turbidity + mud + MSK_class
grazer_scraper ~ MSK_class + turbidity + land1 + mud + var_depth + distance_to_outlet
gatherer_collector ~ foam + MSK_class + var_depth + turbidity + mud + turbidity
active_filter_feeder ~ decidious_per_forest + Masl_2
passive_filter_feeder ~ mud + Masl_2 + decidious_per_forest +  foam  + var_depth
parasite ~ distance_to_outlet + gatherer_collector + MSK_class + predator
"
mod.fit16 = sem(sem.mod16,data=var.sem,ordered=fact) #run the SEM
mod.fit16 #visualize fitting results
summary(mod.fit16,stand=T,rsq=T) #visualize path coefficients
sem.mod14 <- "
#..Regional scale
decidious_per_forest ~ Masl_2
decidious_per_forest ~~ distance_to_outlet
land1 ~ Masl_2
land1~~distance_to_outlet
distance_to_outlet ~ Masl_2
#..Habitat scale
mud ~ Masl_2 + MSK_class
MSK_class ~ Masl_2 + distance_to_outlet
foam ~ land1
var_depth ~  MSK_class + land1
turbidity ~ distance_to_outlet + var_depth + foam
land1 ~~ decidious_per_forest
decidious_per_forest ~~ MSK_class
#..Trophic structure
predator ~ passive_filter_feeder + grazer_scraper + shredder + active_filter_feeder + passive_filter_feeder + gatherer_collector
shredder ~ decidious_per_forest + Masl_2 + turbidity + mud + land1
grazer_scraper ~ MSK_class + turbidity + predator + land1 + mud
gatherer_collector ~ mud + foam + predator + MSK_class
active_filter_feeder ~ decidious_per_forest + shredder + mud + foam + turbidity + land1
passive_filter_feeder ~ mud + MSK_class + turbidity + Masl_2 + foam + decidious_per_forest + land1 + var_depth
parasite ~ distance_to_outlet + gatherer_collector + grazer_scraper + mud + MSK_class + predator
"
mod.fit14 = sem(sem.mod14,data=var.sem,ordered=fact) #run the SEM
lavInspect(mod.fit16, "optim.gradient")
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
load(paste0(output,"Rivnet.RData"))
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
#...Load RDATA from Rivnet_DatMan.R
load(paste0(output,"Rivnet.RData"))
head(rivnet)
head(fun.mat.IBCH)
library(ggplot2)
J = cbind(rivnet$year,fun.mat.IBCH)
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y="grazer_scraper"))
head(J)
str(J)
library(tidyverse)
J = as.data.frame(J)
str(J)
colnames(J)[1] = year
colnames(J)[1] = "year"
str(J)
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y="grazer_scraper"))
geom_bar(mapping=aes(x="year",y="grazer_scraper"))
ggplot(data=J) +
geom_bar(mapping=aes(x="year",y="grazer_scraper"))
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y="grazer_scraper"))
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y=fun.mat.IBCH[1]))
fun.mat.IBCH[1]
geom_boxplot(mapping=aes(x="year",y=fun.mat.IBCH[,1]))
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y=fun.mat.IBCH[,1]))
J
J$year = as.factor(J$year)
str(J)
ggplot(data=J) +
geom_boxplot(mapping=aes(x="year",y=fun.mat.IBCH[,1]))
ggplot(data=J, mapping=aes(x="year",y=fun.mat.IBCH[,1])) +
geom_boxplot()
boxplot(fun.mat.IBCH[,1] ~ year,data=J)
boxplot(fun.mat.IBCH[,2] ~ year,data=J)
boxplot(fun.mat.IBCH[,3] ~ year,data=J)
boxplot(fun.mat.IBCH[,4] ~ year,data=J)
boxplot(fun.mat.IBCH[,5] ~ year,data=J)
boxplot(fun.mat.IBCH[,6] ~ year,data=J)
boxplot(fun.mat.IBCH[,7] ~ year,data=J)
which(J$year==9999)
J = J[-which(J$year==999),]
str(J)
-which(J$year==999)
J = cbind(rivnet$year,fun.mat.IBCH)
J = as.data.frame(J)
colnames(J)[1] = "year"
J$year = as.factor(J$year)
J = J[-which(J$year==9999),]
str(J)
boxplot(fun.mat.IBCH[,7] ~ year,data=J)
boxplot(fun.mat.IBCH[,1] ~ year,data=J)
boxplot(J[,2] ~ year,data=J)
ggplot(data=J, mapping=aes(x="year",y=J[,2])) +
geom_boxplot()
boxplot(J[,2] ~ year,data=J)
J = droplevels(J)
boxplot(J[,2] ~ year,data=J)
str(J)
ggplot(data=J, mapping=aes(x=year,y=shredder)) +
geom_boxplot()
1:ncol(fun.mat.IBCH)
ncol(fun.mat.IBCH)
i=2
p[i] <- ggplot(data=J, mapping=aes(x=year,y=colnames(J)[i])) +
geom_boxplot()
p[i]
i
?assign()
paste0(p,i)
paste0("p",i)
name <- ggplot(data=J, mapping=aes(x=year,y=colnames(J)[i])) +
geom_boxplot()
name
colnames(J)[i])
colnames(J)[i])
colnames(J)[i]
sp = colnames(fun.mat.IBCH)
sp
1:length(sp)
sp[i]
name <- ggplot(data=J, mapping=aes(x=year,y=sp[i]) +
geom_boxplot()
name
name <- ggplot(data=J, mapping=aes(x=year,y=sp[i]) +
geom_boxplot()
name <- ggplot(data=J, mapping=aes(x=year,y=sp[i])) +
geom_boxplot()
name
sp[i])
sp[i]
sp
name <- ggplot(data=J, mapping=aes(x=year,y=sp)) +
geom_boxplot()
name
name <- ggplot(data=J, mapping=aes(x=year,y=shredder)) +
geom_boxplot()
name
sp
p1 <- ggplot(data=J, mapping=aes(x=year,y=grazer_scraper)) +
geom_boxplot()
p2 <- ggplot(data=J, mapping=aes(x=year,y=shredder)) +
geom_boxplot()
p3 <- ggplot(data=J, mapping=aes(x=year,y=gatherer_collector)) +
geom_boxplot()
p4 <- ggplot(data=J, mapping=aes(x=year,y=active_filter_feeder)) +
geom_boxplot()
p5 <- ggplot(data=J, mapping=aes(x=year,y=passive_filter_feeder)) +
geom_boxplot()
p6 <- ggplot(data=J, mapping=aes(x=year,y=predator)) +
geom_boxplot()
p7 <- ggplot(data=J, mapping=aes(x=year,y=parasite)) +
geom_boxplot()
rm(list=ls())
Script <- "../rivnet/scripts/" #Working directory for scripts
Dat <- "../rivnet/data/" #Working directory for data
fig.p <- "../rivnet/figs/" #working directory for figures
output <- "../rivnet/output/"
load(paste0(output,"Rivnet.RData"))
library(tidyverse)
J = cbind(rivnet$year,fun.mat.IBCH)
J = as.data.frame(J)
colnames(J)[1] = "year"
J$year = as.factor(J$year)
J = J[-which(J$year==9999),]
J = droplevels(J)
R <- "../rivnet/R/"
load(paste0(R,"Multiplot.R"))
require(paste0(R,"Multiplot.R"))
source(paste0(R,"Multiplot.R"))
p1 <- ggplot(data=J, mapping=aes(x=year,y=grazer_scraper)) +
geom_boxplot()
p1
p1 <- ggplot(data=J, mapping=aes(x=year,y=grazer_scraper)) +
geom_boxplot()
p2 <- ggplot(data=J, mapping=aes(x=year,y=shredder)) +
geom_boxplot()
p3 <- ggplot(data=J, mapping=aes(x=year,y=gatherer_collector)) +
geom_boxplot()
p4 <- ggplot(data=J, mapping=aes(x=year,y=active_filter_feeder)) +
geom_boxplot()
p5 <- ggplot(data=J, mapping=aes(x=year,y=passive_filter_feeder)) +
geom_boxplot()
p6 <- ggplot(data=J, mapping=aes(x=year,y=predator)) +
geom_boxplot()
p7 <- ggplot(data=J, mapping=aes(x=year,y=parasite)) +
geom_boxplot()
multiplot(p1,p2,p3,p4,p5,p6,p7,cols=2)
pdf(paste0(fig.p,"TimeEffect.pdf"), width=13, height=8)
multiplot(p1,p2,p3,p4,p5,p6,p7,cols=2)
dev.off()
install.packages("blogdown")
